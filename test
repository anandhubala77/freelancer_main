import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

// Thunk to fetch all fraud reports
export const fetchFraudReports = createAsyncThunk(
  "admin/fetchFraudReports",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get("/admin/fraud-reports");
      return response.data; // { projectReports: [], userReports: [] }
    } catch (err) {
      return rejectWithValue(err.response?.data?.message || err.message);
    }
  }
);

// Thunk to delete a fraud report
export const deleteFraudReport = createAsyncThunk(
  "admin/deleteFraudReport",
  async ({ type, reportedOnId, reportId }, { rejectWithValue }) => {
    try {
      const url = `/admin/fraud-reports/${type}/${reportedOnId}/${reportId}`;
      await axios.delete(url);
      return { type, reportedOnId, reportId }; // Return for reducer
    } catch (err) {
      return rejectWithValue(err.response?.data?.message || "Delete failed");
    }
  }
);

// Slice
const adminFraudSlice = createSlice({
  name: "adminFraud",
  initialState: {
    reports: [],
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      // Fetch fraud reports
      .addCase(fetchFraudReports.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchFraudReports.fulfilled, (state, action) => {
        state.loading = false;

        const { projectReports = [], userReports = [] } = action.payload;

        const formattedProjectReports = projectReports.map((r) => ({
          reportId: r._id,
          reportedOnId: r.reportedOnId,
          reportedBy: r.reportedByName || r.reportedBy,
          reason: r.reason,
          createdAt: r.createdAt,
          type: "project", // âœ… ensure lowercase
        }));

        const formattedUserReports = userReports.map((r) => ({
          reportId: r.reportId, 
          reportedOnId: r.reportedOnId,
          reportedBy: r.reportedByName || r.reportedBy,
          reason: r.reason,
          createdAt: r.createdAt,
          type: "user", // âœ… ensure lowercase
        }));

        state.reports = [...formattedProjectReports, ...formattedUserReports];
      })
      .addCase(fetchFraudReports.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || "Failed to fetch fraud reports.";
      })

      // Delete report
      .addCase(deleteFraudReport.fulfilled, (state, action) => {
        const { type, reportedOnId, reportId } = action.payload;
        state.reports = state.reports.filter(
          (r) =>
            !(
              r.reportId === reportId &&
              r.reportedOnId === reportedOnId &&
              r.type === type
            )
        );
      })
      .addCase(deleteFraudReport.rejected, (state, action) => {
        state.error = action.payload || "Failed to delete report.";
      });
  },
});

export default adminFraudSlice.reducer;


// src/store/slices/adminProjectSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';
import { base_url } from '../../services/base_url';

// Fetch all projects
export const fetchAllProjects = createAsyncThunk(
  'admin/fetchAllProjects',
  async (_, { rejectWithValue }) => {
    try {
      const res = await axios.get(`${base_url}/admin/projects`);
      return res.data; // ðŸ‘ˆ fix here
    } catch (err) {
      return rejectWithValue(err.response?.data?.message || err.message);
    }
  }
);

// Delete a project
export const adminDeleteProject = createAsyncThunk(
  'admin/deleteProject',
  async (projectId, { rejectWithValue }) => {
    try {
      console.log("Deleting project:", projectId); // âœ…
      const res = await axios.delete(`${base_url}/admin/projects/${projectId}`);
      return projectId;
    } catch (err) {
      console.error("DELETE Error", err); // âœ…
      return rejectWithValue(err.response?.data?.message || err.message);
    }
  }
);


const adminProjectsSlice = createSlice({
  name: 'adminProjects',
  initialState: {
    projects: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProjects.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProjects.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.projects = action.payload;
      })
      .addCase(fetchAllProjects.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      })
      .addCase(adminDeleteProject.fulfilled, (state, action) => {
        state.projects = state.projects.filter(p => p._id !== action.payload);
      });
  }
});

export const selectAdminProjects = (state) => state.adminProjects.projects || [];
export const getAdminProjectsStatus = (state) => state.adminProjects.status;
export const getAdminProjectsError = (state) => state.adminProjects.error;

export default adminProjectsSlice.reducer;

// src/store/slices/adminProjectSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';
import { base_url } from '../../services/base_url';

// Fetch all projects
export const fetchAllProjects = createAsyncThunk(
  'admin/fetchAllProjects',
  async (_, { rejectWithValue }) => {
    try {
      const res = await axios.get(`${base_url}/admin/projects`);
      return res.data; // ðŸ‘ˆ fix here
    } catch (err) {
      return rejectWithValue(err.response?.data?.message || err.message);
    }
  }
);

// Delete a project
export const adminDeleteProject = createAsyncThunk(
  'admin/deleteProject',
  async (projectId, { rejectWithValue }) => {
    try {
      console.log("Deleting project:", projectId); // âœ…
      const res = await axios.delete(`${base_url}/admin/projects/${projectId}`);
      return projectId;
    } catch (err) {
      console.error("DELETE Error", err); // âœ…
      return rejectWithValue(err.response?.data?.message || err.message);
    }
  }
);


const adminProjectsSlice = createSlice({
  name: 'adminProjects',
  initialState: {
    projects: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProjects.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProjects.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.projects = action.payload;
      })
      .addCase(fetchAllProjects.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      })
      .addCase(adminDeleteProject.fulfilled, (state, action) => {
        state.projects = state.projects.filter(p => p._id !== action.payload);
      });
  }
});

export const selectAdminProjects = (state) => state.adminProjects.projects || [];
export const getAdminProjectsStatus = (state) => state.adminProjects.status;
export const getAdminProjectsError = (state) => state.adminProjects.error;

export default adminProjectsSlice.reducer;
